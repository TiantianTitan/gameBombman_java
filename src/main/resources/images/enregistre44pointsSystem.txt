#include "Evaluation.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/time.h>

#define NCOMMANDES 10
struct etat
{
  pid_t pid;
  char commande[100];
  char arg[100];
  int en_cours;
  struct timeval debut;
  struct timeval fin;
} etat_tableau[NCOMMANDES];

int f(int s){
    if(WIFEXITED(s))
    return WEXITSTATUS(s);
    return 128+WTERMSIG(s);
}

// int test(Expression e){
//   if(execl(e))
// }

void taiter_SIGCHLD(int s);
void modifier_etat(pid_t pid);


int evaluer_expr(Expression *e)
{

  pid_t pid ;
  int error;
  
  if (e->type == VIDE) return 0;


  /***********************LEVEL 1****************************/

  if (e->type == SIMPLE){
      
    if( e->gauche != NULL) {
      evaluer_expr(e->gauche);
    }
    
    pid = fork();
    
    if(pid == 0) {
        execvp(e->arguments[0],e->arguments);
        perror("execvp");
        exit(1);
    }

    waitpid(pid,&error,0);

    return f(error);
  }


// REDIRECTION IN  cmd < in

  if(e->type == REDIRECTION_I){
    
    int save_stdin = dup(0);
    
    int fd = open(e->arguments[0],O_RDONLY);
    if(fd == -1){
          perror("open");
          exit(1);
    }
    
    
    if( e->gauche != NULL) {

    if (dup2(fd,STDIN_FILENO) == -1){
        perror("dup2");
        exit(1);
    }
    
    
    evaluer_expr(e->gauche);
        
    }
    
                
    if (dup2(save_stdin,0) == -1){
        perror("dup2");
        exit(1);
    }
    
    if(close(fd) == -1){
      perror("close");
      exit(1);
    }
    
    if(close(save_stdin) == -1){
      perror("close");
      exit(1);
    }
    
  
  }

// REDIRECTION OUT  cmd > out


  if(e->type == REDIRECTION_O){
    //  fprintf(stderr,"1:  %s\n",e->arguments[0]);
    //  fprintf(stderr,"2: %s\n" ,e-> gauche ->arguments[0]);

    int save_stdout = dup(1);
          
    int fd = open(e->arguments[0],O_WRONLY|O_CREAT|O_TRUNC,0600);
    
    if(fd == -1){
        perror("open");
        exit(1);
    }


    if( e->gauche != NULL) {

      
        if (dup2(fd,STDOUT_FILENO) == -1){
            perror("dup2");
            exit(1);
    }
      
        evaluer_expr(e->gauche);
      
    }  
    
    
        
    if (dup2(save_stdout,1) == -1){
        perror("dup2");
        exit(1);
    }
    
    
    if(close(fd) == -1){
      perror("close");
      exit(1);
    }
    
    
    if(close(save_stdout) == -1){
      perror("close");
      exit(1);
    }
      

  }





// REDIRECTION ERROR 

  if(e->type == REDIRECTION_E){

    int save_stderr = dup(2);

    int fd = open(e->arguments[0],O_RDWR|O_CREAT|O_TRUNC,0600);
    if(fd == -1){
        perror("open");
        exit(1);
    }
    
    if( e->gauche != NULL) {

        if (dup2(fd,STDERR_FILENO) == -1){
            perror("dup2");
            exit(1);
        }
      
      evaluer_expr(e->gauche);
      
    }
              
    if (dup2(save_stderr,2) == -1){
        perror("dup2");
        exit(1);
    }
    
            
    if(close(fd) == -1){
            perror("close");
            exit(1);
        }
        
    
    if(close(save_stderr) == -1){
      perror("close");
      exit(1);
    }

  }
  
  
//  REDIRECTION ERROR ET OUT  cmd &> out

  if(e->type == REDIRECTION_EO){

    int save_stdout = dup(1);
    int save_stderr = dup(2);

        
    int fd = open(e->arguments[0],O_RDWR|O_CREAT|O_TRUNC,0600);
    if(fd == -1){
        perror("open");
          exit(1);
    }
    
    if( e->gauche != NULL) {

        if (dup2(fd,STDERR_FILENO) == -1){
            perror("dup2");
            exit(1);
        }
        if (dup2(fd,STDOUT_FILENO) == -1){
            perror("dup2");
            exit(1);
        }

          
          evaluer_expr(e->gauche);
          
    }
    
    if (dup2(save_stderr,2) == -1){
        perror("dup2");
        exit(1);
    }
    
    if (dup2(save_stdout,1) == -1){
        perror("dup2");
        exit(1);
    }

    if(close(save_stdout) == -1){
      perror("close");
      exit(1);
    }
    
    if(close(save_stderr) == -1){
      perror("close");
      exit(1);
    }
    
    if(close(fd) == -1){
      perror("close");
      exit(1);
    }

  }
  
  /***********************LEVEL 2****************************/
  
  
    if(e->type == SEQUENCE){
    /*
        fprintf(stderr,"%d\n",e->type);
        fprintf(stderr,"%d\n",e->gauche-> type);
        fprintf(stderr,"%s\n",e->gauche-> arguments[0]);
        fprintf(stderr,"%d\n",e->droite-> type);
        fprintf(stderr,"%s\n",e->droite-> arguments[0]);
*/
    evaluer_expr(e->gauche);
    evaluer_expr(e->droite);

    }
  
    if(e->type == SEQUENCE_ET){
    
   if( evaluer_expr(e->gauche) == 1){
      return 1;
    }

    if( evaluer_expr(e->droite) == 1){
      return 1;
    }

    }
  

  
  if(e->type == SEQUENCE_OU){

    if(evaluer_expr(e->gauche) == 0 ) return 0;
    if(evaluer_expr(e->droite) == 0) return 0;

    return 1;
}
  
  

    if(e->type == PIPE){

    int pfd[2];

    pipe(pfd);
    pid = fork();

    if(pid == 0){
        
      close(pfd[0]);
      if(pfd[1] != 1){
        dup2(pfd[1],1);
        close(pfd[1]);
      }
      if(e->gauche-> type== SIMPLE ){
        execvp(e->gauche->arguments[0],e->gauche->arguments);
      }
      evaluer_expr(e->gauche);
      
    }

    
    pid = fork();
    if(pid == 0){
     close(pfd[1]);
      if(pfd[0] != 0){
        dup2(pfd[0],0);
        close(pfd[0]);
      }
      if(e->gauche-> type== SIMPLE ){
      execvp(e->droite->arguments[0],e->droite->arguments);
    }
    evaluer_expr(e->droite);
    }

    close(pfd[0]);
    close(pfd[1]);
    wait(NULL);
    wait(NULL);

  
  
  
    }
    
/***********************LEVEL 3****************************/
  

if(e->type == BG){

  struct sigaction  a;
  a.sa_handler=taiter_SIGCHLD;
  a.sa_flags=SA_RESTART;
  sigemptyset(&a.sa_mask);
  sigaction(SIGCHLD,&a,NULL); 
  fprintf(stderr,"test BG\n");

}  

  return 0;
}


void taiter_SIGCHLD(int s){
  pid_t w ;
  while((w= waitpid(-1,NULL,WNOHANG))>0){
    modifier_etat(w);
  }
}

void modifier_etat(pid_t pid)
{
  for (int i = 0; i < NCOMMANDES; i++)
    if (etat_tableau[i].pid == pid)
    {
      etat_tableau[i].en_cours = 0;
      gettimeofday(&etat_tableau[i].fin, NULL);
      return;
    }
  fprintf(stderr, "%d non enregistrÃ©\n", pid);
  return;
}

